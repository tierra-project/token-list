name: Validate Token Submission

on:
  pull_request:
    paths:
      - 'tokens/80094.json'
      - '.github/token-submission-template.md'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Install dependencies
        run: pnpm install

      - name: Validate token list format
        run: pnpm run validate

      - name: Generate PR description
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const tokenFile = files.find(f => f.filename === 'tokens/80094.json');
            if (!tokenFile) {
              core.setFailed('No changes to token list found');
              return;
            }
            
            // Get the changes
            const { data: content } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'tokens/80094.json',
              ref: context.sha
            });
            
            // Save the content to a temporary file
            fs.writeFileSync('tokens/80094.json.new', Buffer.from(content.content, 'base64').toString());
            
            // Generate PR description
            const { execSync } = require('child_process');
            try {
              const description = execSync('pnpm run generate-pr-from-list tokens/80094.json tokens/80094.json.new', { encoding: 'utf8' });
              
              // Update PR description if it's empty or doesn't match the template
              if (!context.payload.pull_request.body || 
                  !context.payload.pull_request.body.includes('## Token Information')) {
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  body: description
                });
                core.info('Updated PR description with generated template');
              }
            } catch (error) {
              core.setFailed('Failed to generate PR description');
              console.error(error);
            }

      - name: Check PR template
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const template = fs.readFileSync('.github/token-submission-template.md', 'utf8');
            
            // Check if PR description contains required sections
            const requiredSections = [
              '## Token Information',
              '## Verification',
              '## Checklist'
            ];
            
            const missingSections = requiredSections.filter(
              section => !pr.body.includes(section)
            );
            
            if (missingSections.length > 0) {
              core.setFailed(`Missing required sections in PR description: ${missingSections.join(', ')}`);
            }
            
            // Check if verification checkboxes are checked
            const verificationBoxes = pr.body.match(/\[ \].*confirm/g) || [];
            if (verificationBoxes.length > 0) {
              core.setFailed('All verification boxes must be checked before submission');
            }
            
            // Check if checklist boxes are checked
            const checklistBoxes = pr.body.match(/\[ \].*I have/g) || [];
            if (checklistBoxes.length > 0) {
              core.setFailed('All checklist boxes must be checked before submission');
            }

      - name: Validate token changes
        uses: actions/github-script@v7
        with:
          script: |
            // Run the validation script
            const { execSync } = require('child_process');
            try {
              execSync('pnpm run validate', { stdio: 'inherit' });
            } catch (error) {
              core.setFailed('Token validation failed');
            }